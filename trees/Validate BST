Given the root of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:

The left 
subtree
 of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.

Input: root = [5,1,4,null,null,3,6]
Output: false
Explanation: The root node's value is 5 but its right child's value is 4.

//code
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };

class Solution {
public:
   long long ans=LONG_MIN;
   void calculate(TreeNode* root,bool& istrue)
    {
        if(root==NULL)
        return;

        calculate(root->left,istrue);
        if(ans>=root->val)
        istrue=false;
        ans=root->val;
        calculate(root->right,istrue);
    }
    bool isValidBST(TreeNode* root) {
       bool istrue=true;
        calculate(root,istrue);
        return istrue;   
    }
};
